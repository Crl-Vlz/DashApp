# -*- coding: utf-8 -*-
"""UFC_DashApp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L9RFHgKOnOY2CtNIrfSFw92sUgxaeAMr
"""

import pandas as pd
import numpy as np
import os

# !pip install dash
# !pip install trimesh
import dash
from dash import dcc, html, Input, Output
import trimesh
import plotly.graph_objects as go

# Read data
data = pd.read_csv('ufc-master.csv')
fight_data = pd.read_csv('data.csv')

# Convert Date columns to datetime format
data['Date'] = pd.to_datetime(data['Date'], format="%Y-%m-%d")
fight_data['date'] = pd.to_datetime(fight_data['date'], format="%Y-%m-%d")

# Rename columns to make them consistent
data.rename(columns={'RedFighter' : 'R_fighter', 'BlueFighter' : 'B_fighter'}, inplace=True)
fight_data.rename(columns={'date' : 'Date', 'B_avg_opp_TOTAL_STR_landed' : 'R_avg_TOTAL_STR_landed',
                           'B_avg_opp_TD_landed' : 'R_avg_TD_landed', 'B_avg_opp_HEAD_landed' : 'R_avg_HEAD_landed',
                           'B_avg_opp_BODY_landed' : 'R_avg_BODY_landed', 'B_avg_opp_LEG_landed' : 'R_avg_LEG_landed',
                           'B_avg_opp_CLINCH_landed' : 'R_avg_CLINCH_landed'}, inplace=True)

# Select relevant columns for merging
fight_cols = ['R_fighter', 'B_fighter', 'Date', 'B_avg_TOTAL_STR_landed', 'B_avg_TD_landed',
              'B_avg_HEAD_landed', 'B_avg_BODY_landed', 'B_avg_LEG_landed', 'B_avg_CLINCH_landed',
              'R_avg_TOTAL_STR_landed', 'R_avg_TD_landed', 'R_avg_HEAD_landed', 'R_avg_BODY_landed',
              'R_avg_LEG_landed', 'R_avg_CLINCH_landed']

# Merge the data and fight_data DataFrames
data_subset = data[['R_fighter', 'B_fighter', 'Date', 'Finish']]
df = data_subset.merge(fight_data[fight_cols], how='left', on=['R_fighter', 'B_fighter', 'Date'])

# Remove columns with duplicate names
df = df.loc[:, ~df.columns.duplicated()]

# Drop rows with NaN values
df.dropna(inplace=True)

df['keys'] = df['Date'].dt.strftime('%Y-%m-%d') + ": " +df['B_fighter'] + " v " + df['R_fighter']
df.set_index('keys', inplace=True)

def mirror_mesh(mesh, axis='x'):
    """
    Mirrors a mesh across the specified axis (default is 'x').
    """
    vertices = mesh.vertices.copy()
    if axis == 'x':
        vertices[:, 0] = -vertices[:, 0]  # Negate X-coordinates
    elif axis == 'y':
        vertices[:, 1] = -vertices[:, 1]  # Negate Y-coordinates
    elif axis == 'z':
        vertices[:, 2] = -vertices[:, 2]  # Negate Z-coordinates
    return trimesh.Trimesh(vertices=vertices, faces=mesh.faces)

def load_mesh_with_offset(file_path, offset=(0, 0, 0), color='lightblue', opacity=0.5, intensity=1, mirror=False):
    mesh = trimesh.load(file_path)
    if mirror:
        mesh = mirror_mesh(mesh)
    vertices = mesh.vertices + offset  # Apply offset
    faces = mesh.faces
    x, y, z = vertices[:, 0], vertices[:, 1], vertices[:, 2]
    i, j, k = faces[:, 0], faces[:, 1], faces[:, 2]
    return go.Mesh3d(x=x,
                     y=y,
                     z=z,
                     i=i,
                     j=j,
                     k=k,
                     intensity=np.full(len(vertices), intensity),
                     colorscale='thermal',
                     cmin=0,
                     cmax=1,
                     opacity=opacity)

# Initialize Dash app
app = dash.Dash(__name__)

# Layout
app.layout = html.Div([
    html.H1("Damage by Fighter"),
    dcc.Dropdown(
        id='config-dropdown',
        options=[{'label': idx, 'value': idx} for idx in df.index],
        value=df.index[0],  # Default to the first row
        placeholder="Select a fight"
    ),
    dcc.RadioItems(
        id='fighter-toggle',
        options=[
            {'label': 'Blue Fighter', 'value': 'B'},
            {'label': 'Red Fighter', 'value': 'R'}
        ],
        value='B',
        inline=True
    ),
    dcc.Graph(id='mesh-plot')
])

# Callback to update the plot based on dropdown selection
@app.callback(
    Output('mesh-plot', 'figure'),
    Input('config-dropdown', 'value'),
    Input('fighter-toggle', 'value')
)
def update_plot(selected_row, fighter):
    # Get the selected intensity data
    total, head, body, leg, clinch = df.loc[selected_row][[f'{fighter}_avg_TOTAL_STR_landed',\
                                                           f'{fighter}_avg_HEAD_landed',\
                                                           f'{fighter}_avg_BODY_landed',\
                                                           f'{fighter}_avg_LEG_landed',\
                                                           f'{fighter}_avg_CLINCH_landed']]

    print(f"Percentage HEAD: {head / total}")
    print(f"Percentage BODY: {body / total}")
    print(f"Percentage LEg: {leg / total}")

    # Offset meshes
    head = load_mesh_with_offset('10709_GenericHead_v2.obj', intensity=head/total, offset=(0, 0, 25))
    torso = load_mesh_with_offset("11541_maletorso_V1.obj", offset=(0, 0, 0), intensity=body/total)
    leg_right = load_mesh_with_offset("11539_leg_01_V1.obj", offset=(-10, -0, -140), intensity=leg/total)
    leg_left = load_mesh_with_offset("11539_leg_01_V1.obj", offset=(10, -0, -140), intensity=leg/total, mirror=True)
    arm_right = load_mesh_with_offset("11535_arm_V3_.obj", offset=(-40, -0, -10), intensity=clinch/total)
    arm_left = load_mesh_with_offset("11535_arm_V3_.obj", offset=(40, -0, -10), mirror=True, intensity=clinch/total)

    fig = go.Figure(data=[head, torso, leg_right, arm_right, leg_left, arm_left])

    # Update layout
    fig.update_layout(
        scene=dict(
            xaxis_title="X Axis",
            yaxis_title="Y Axis",
            zaxis_title="Z Axis"
        ),
        title=f"Strikes landed by {df.loc[selected_row][fighter + '_fighter']}"
    )

    return fig

# Get the port from the environment variable (Render sets this automatically)
port = int(os.environ.get('PORT', 8050))  # Default to 8050 if not se

# Run the app
if __name__ == '__main__':
    app.run_server(host='0.0.0.0', port=port)
